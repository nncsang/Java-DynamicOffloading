package fr.eurecom.plots;

import java.io.File;
import java.text.DecimalFormat;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import android.app.Activity;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.widget.TextView;
import fr.eurecom.wifi3gproject.Constants;
import fr.eurecom.wifi3gproject.DownloadFilesTask;
import fr.eurecom.wifi3gproject.MainActivity;
import fr.eurecom.wifi3gproject.R;
import fr.eurecom.wifi3gproject.Task;

public class FinalStat extends Activity {

	int WifiFlows = 0;
	int CellFlows = 0;
	double TotWifi = 0;
	double TotCell = 0;
	double DelayWifi = 0;
	double DelayCell = 0;
	double DelayT=0;
	double DelayRequest=0;
	double tot1=0;
	double tot2=0;
	double aveRwf=0;
	double aveRc=0;
	public static double ratioWF;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.final_stat);

		File dir = new File(Environment.getExternalStorageDirectory().getPath()+ "/SpringProject2014/Log");
		File[] files = dir.listFiles();
		for(int i=0; i<files.length; i++){
			if(files[i].getName().startsWith("data")) parseDataLog(files[i]);
			if(files[i].getName().startsWith("statistics")) parseRatesLog(files[i]);		
		}
}
	
	private static String getValue(String tag, Element element) {
		NodeList nodes = element.getElementsByTagName(tag).item(0).getChildNodes();
		Node node = (Node) nodes.item(0);
		return node.getNodeValue();
	}

	private void parseDataLog(File myFile){
		
		try{
			
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			org.w3c.dom.Document doc = dBuilder.parse(myFile);
			doc.getDocumentElement().normalize();

			NodeList nodes = doc.getElementsByTagName("record");
			
			
			for (int i = 0; i < nodes.getLength(); i++) {
				
				boolean check = true;
				Node node = nodes.item(i);
				
				if (node.getNodeType() == Node.ELEMENT_NODE) {
					Element element = (Element) node;
					String msg = new String(getValue("message", element));
					String[] parts = msg.split(" ");
					
					if(parts[1].compareTo("W")==0){
						
						int id = Integer.parseInt(parts[0]);
						
						if(DownloadFilesTask.wifi_flow_index.size() != 0){
							
							for (int j=0; j < DownloadFilesTask.wifi_flow_index.size(); j++){
								
								if ( (id == DownloadFilesTask.wifi_flow_index.get(j))){
									//double temp =  (Double.parseDouble(parts[3]) - Double.parseDouble(parts[2]) + Double.parseDouble(parts[7]) + DownloadFilesTask.delay_wifi.get(j)) / 1000;
									double temp =  (Double.parseDouble(parts[3]) - Double.parseDouble(parts[2]) + DownloadFilesTask.delay_wifi.get(j)) / 1000;
									DelayWifi = DelayWifi + temp;
									if (Constants.debug) System.out.println("WIFI DELAY: " + temp);
									check = false;
									break;
								}
							}
							
						}
						
						if (check){
							//double temp2 =  (Double.parseDouble(parts[3]) - Double.parseDouble(parts[2]) + Double.parseDouble(parts[7])) / 1000;
							double temp2 =  (Double.parseDouble(parts[3]) - Double.parseDouble(parts[2])) / 1000;
							DelayWifi = DelayWifi + temp2;
							if (Constants.debug) System.out.println("NORMAL DELAYED ID: " + id + "DELAY: " + temp2);
						}	
						
						WifiFlows++;
						TotWifi += Double.parseDouble(parts[4]);		
					}else{
						CellFlows++;
						TotCell += Double.parseDouble(parts[4]);	
						//DelayCell += (Double.parseDouble(parts[3]) - Double.parseDouble(parts[2]) + Double.parseDouble(parts[7]))/1000;
						DelayCell += (Double.parseDouble(parts[3]) - Double.parseDouble(parts[2]))/1000;
						//System.out.println("CELL DELAY: " + (Double.parseDouble(parts[3])-Double.parseDouble(parts[2]) + Double.parseDouble(parts[7]))/1000 );
						if (Constants.debug) System.out.println("CELL DELAY: " + (Double.parseDouble(parts[3])-Double.parseDouble(parts[2]))/1000 );
					}
					
					DelayRequest += Double.parseDouble(parts[5]);
			}
				
		}
			
			TextView RD = (TextView)findViewById(R.id.avgDWF);
			//RD.setText(String.valueOf((DelayRequest/(WifiFlows+CellFlows))/1000));
			RD.setText(String.valueOf(DownloadFilesTask.d_wifi));
			
			TotWifi = Math.ceil(TotWifi*8*Math.pow(10, -6));
			TotCell = Math.ceil(TotCell*8*Math.pow(10, -6));
			int Ntot = WifiFlows + CellFlows;
			DelayT = Math.ceil((DelayWifi+DelayCell)/Ntot); //N
			//DelayT = (DelayWifi+DelayCell)/Ntot;
			if(WifiFlows!=0) DelayWifi = Math.ceil(DelayWifi/WifiFlows);
			if(CellFlows!=0) DelayCell = Math.ceil(DelayCell/CellFlows);
			
			TextView WF = (TextView)findViewById(R.id.WF);
			TextView CF = (TextView)findViewById(R.id.CF);
			TextView TW = (TextView)findViewById(R.id.TotWifi);
			TextView TC = (TextView)findViewById(R.id.TotCell);
			TextView DW = (TextView)findViewById(R.id.DelayWifi);
			TextView DC = (TextView)findViewById(R.id.DelayCell);
			TextView D = (TextView)findViewById(R.id.DelayT);
			TextView Dur = (TextView)findViewById(R.id.duration_value);
			
			/* ADDED FOR DELAY OFFLOADING 
			 * 
			 */
			TextView comming_task = (TextView)findViewById(R.id.task_comming_value);
			TextView queued_task = (TextView)findViewById(R.id.task_queue_value);
			
			
			comming_task.setText(String.valueOf(Constants.TOTAL_TASKS_COMING_DURING_OFF_PERIOD));
			queued_task.setText(String.valueOf(Constants.TOTAL_TASKS_BEING_QUEUED));
			
			//WF.setText(String.valueOf(WifiFlows));
			//CF.setText(String.valueOf(CellFlows));	
			
			DecimalFormat f=new DecimalFormat();
			f.setMaximumFractionDigits(2);
			
			ratioWF = (WifiFlows/(double)Ntot)*100.0;
			double ratioC=(CellFlows/(double)Ntot)*100.0;
			
			if (Constants.debug) System.out.println("RATIOS= "+f.format(ratioWF)+" "+f.format(ratioC));
			WF.setText(f.format(ratioWF));
			CF.setText(f.format(ratioC));
			TW.setText(String.valueOf(TotWifi));
			TC.setText(String.valueOf(TotCell));
			DW.setText(String.valueOf(DelayWifi));
			DC.setText(String.valueOf(DelayCell));
			D.setText(String.valueOf(DelayT));
			Dur.setText(String.valueOf(DownloadFilesTask.downloadfilestask_duration) + "\nW: " + ((Task.max_duration_wifi - Task.start_wifi_time) / 1000) + "\nC: " + ((Task.max_duration_cell - Task.start_cell_time) / 1000));
			
			if (Constants.debug) System.out.println("WIFI_DURATION: " + ((Task.max_duration_wifi - Task.start_wifi_time) / 1000));
			if (Constants.debug) System.out.println("CELL_DURATION: " + ((Task.max_duration_cell - Task.start_cell_time) / 1000));
			
	} catch (Exception ex) {
		ex.printStackTrace();
	}
 }
	
	
private void parseRatesLog(File myFile){
	
		try{
	
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			org.w3c.dom.Document doc = dBuilder.parse(myFile);
			doc.getDocumentElement().normalize();

			NodeList nodes = doc.getElementsByTagName("record");
			
			for (int i = 0; i < nodes.getLength(); i++) {
				
				Node node = nodes.item(i);
				
				if (node.getNodeType() == Node.ELEMENT_NODE) {
					Element element = (Element) node;
				
					String msg = new String(getValue("message", element));
					String[] parts=msg.split(" ");

					tot1 += Double.parseDouble(parts[0]); // take just the last value is already the EWA - NO!
					tot2 += Double.parseDouble(parts[1]);
				}
				
		}
		
			//aveRwf=Math.ceil(tot1/nodes.getLength()); //Average rate wf
			//aveRc=Math.ceil(tot2/nodes.getLength()); //Average rate cell
			//aveRwf=(Math.round((tot1/nodes.getLength())*100))/100; //Average rate wf
			//aveRc=(Math.round((tot2/nodes.getLength())*100))/100;
			DecimalFormat f = new DecimalFormat();
			f.setMaximumFractionDigits(2);
			aveRwf = tot1 / nodes.getLength();///nodes.getLength();
			aveRc = tot2 / nodes.getLength();///nodes.getLength(); //Average rate cell
			
			//int o=100; //2 cifre decimali
			//int h = (int)(o*(tot1/nodes.getLength()));
			//aveRwf=(double)h/(double)o;
			//int h2 = (int)(o*(tot2/nodes.getLength()));
			//aveRc=(double)h2/(double)o;
			
			//aveRwf=(Math.round((tot1/nodes.getLength())*100))/100; //Average rate wf
			//aveRc=(Math.round((tot2/nodes.getLength())*100))/100;
			
			if (Constants.debug) System.out.println("CHECKRATES: " + aveRwf + " " +aveRc + (tot1/nodes.getLength()) + (tot2/nodes.getLength()));
			
			// Wifi - Cellular Rate
			TextView RW = (TextView)findViewById(R.id.RateWifi);
			TextView RC = (TextView)findViewById(R.id.RateCell);
			TextView LAMDA = (TextView)findViewById(R.id.lamda_value);
			
			System.out.println("SUM_RATE_WIFI: " + Task.sum_rate_wifi + " WIFI FLOWS: " + Task.counter_wifi_flows);
			System.out.println("SUM_RATE_CELL: " + Task.sum_rate_cell + " CELL FLOWS: " + Task.counter_cell_flows);
			RW.setText(f.format(Task.sum_rate_wifi / Task.counter_wifi_flows));
			RC.setText(f.format(Task.sum_rate_cell / Task.counter_cell_flows));
			
			// Arrival Rate calculation
			if (Task.counter_wifi_flows == 0) Task.counter_wifi_flows = 1;
			if (Task.counter_cell_flows == 0) Task.counter_cell_flows = 1;
			double mu = ((Task.sum_rate_wifi / Task.counter_wifi_flows) + (Task.sum_rate_cell / Task.counter_cell_flows)) / (Task.Size / ( WifiFlows + CellFlows));
			double mu_wifi = (Task.sum_rate_wifi / Task.counter_wifi_flows) / (Task.Size / ( WifiFlows + CellFlows));
			double mu_cell = (Task.sum_rate_cell / Task.counter_cell_flows) / (Task.Size / ( WifiFlows + CellFlows));
			
			Log.i("LAMDA", "MU: " + mu);
			Log.i("LAMDA", "MU_wifi: " + mu_wifi);
			Log.i("LAMDA", "MU_cell" + mu_cell);
			
			if (MainActivity.profile == Constants.WARM) {
				LAMDA.setText(f.format(mu * Constants.SYSTEM_UTILIZATION));
			}else{
				LAMDA.setText(String.valueOf(Constants.LAMBDA_IN));
			}
			
			
			if (Constants.debug) System.out.println("DCF: "+(TotCell/(aveRc*CellFlows)));
			double rhowf=(1.0 / ((Task.sum_idt_WF/1000.0) / WifiFlows)) / (aveRwf / ((TotWifi/WifiFlows)) );
			double rhoc=(1.0 / ((Task.sum_idt_C/1000.0) / CellFlows)) /(aveRc/((TotCell/CellFlows)));
			if (Constants.debug) System.out.println("LOAD WF: " + rhowf + " LOAD CELL: " + rhoc);
			if (Constants.debug) System.out.println("WIFI: " + Task.sum_idt_WF/1000.0 + " " + aveRwf + " " + TotWifi + " " + WifiFlows );
			if (Constants.debug) System.out.println("CELL: " + Task.sum_idt_C/1000.0 + " " + aveRc + " " + TotCell + " " + CellFlows );
			if (Constants.debug) System.out.println("CHECKLAMBDAC " + (1.0 / ((Task.sum_idt_C/1000.0) / CellFlows)));
			if (Constants.debug) System.out.println("CHECKLAMBDAW " + (1.0 / ((Task.sum_idt_WF/1000.0) / WifiFlows)));
			
	} catch (Exception ex) {
		ex.printStackTrace();
	}
 }
	
	
}