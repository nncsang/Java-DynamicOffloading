
import java.util.Random;
import java.io.File;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.Callable;
import java.util.concurrent.CompletionService;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.FutureTask;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import org.uncommons.maths.random.*;





public class Main{
	
	static double L_ON = 1.0 / (200 * 1000.0);
	static double L_OFF = 1.0 / (200 * 1000.0);
	
	
	public static ArrayList<Long> WifiPattern(){
		
		ArrayList<Long> wifi_on_off = new ArrayList<Long>();
		
		long interval_on = 0;
		long interval_off = 0;
		
		
		
		Random rng = new Random();
		rng.setSeed(150);
		
		ExponentialGenerator gen_on = new ExponentialGenerator(L_ON, rng);
		ExponentialGenerator gen_off = new ExponentialGenerator(L_OFF, rng);
		
		for (int j=0; j < 12; j++){
			
			interval_on = (long) (interval_off + gen_on.nextValue());
			wifi_on_off.add(interval_on / 1000);
			
		    interval_off = (long) (interval_on + gen_off.nextValue());
		    wifi_on_off.add(interval_off / 1000);
		}
		
		
		return wifi_on_off;
	}
	
     public static void main(String []args){
        System.out.println("Hello World");
        
        double LAMBDA_IN = 0.01;
        Random rand = new Random();
		rand.setSeed(300);
		ExponentialGenerator arr = new ExponentialGenerator(LAMBDA_IN, rand);
		
		ArrayList<Long> wifi_pattern = WifiPattern();
		int pre = 0;
		
		
		int off = 0;
		for(int i = 0; i < 100; i++){
			long cur = pre + (long)arr.nextValue();
					
					int index = -1;
			for(int k=wifi_pattern.size() - 1; k >=0; k--){
				if (cur <= wifi_pattern.get(k)){
					index = k;
				}else{
					break;
				}
			}
			
			if ( (index % 2) == 0){
				off++;
			}
		}
		
     }
}
