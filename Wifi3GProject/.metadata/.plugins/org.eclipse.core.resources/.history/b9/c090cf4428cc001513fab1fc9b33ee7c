
import java.util.Random;
import java.io.File;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.Callable;
import java.util.concurrent.CompletionService;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.FutureTask;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import org.uncommons.maths.random.*;

import android.util.Log;
import fr.eurecom.wifi3gproject.Constants;

public ArrayList<Long> WifiPattern(){
	
	ArrayList<Long> wifi_on_off = new ArrayList<Long>();
	
	long interval_on = 0;
	long interval_off = 0;
	double sim_t = (urls.size() / (Constants.LAMBDA_IN / 1000.0))  / ((1.0 / Constants.L_ON + 1.0 / Constants.L_OFF)/2.0);
	int sim = (int) Math.ceil(sim_t / 2) + 5;
	
	if (Constants.debug) System.out.println("SIM: " + sim);
	
	Random rng = new Random();
	rng.setSeed(150);
	
	ExponentialGenerator gen_on = new ExponentialGenerator(Constants.L_ON, rng);
	ExponentialGenerator gen_off = new ExponentialGenerator(Constants.L_OFF, rng);
	
	for (int j=0; j < 12; j++){
		
		interval_on = (long) (interval_off + gen_on.nextValue());
		wifi_on_off.add(interval_on / 1000);
		
	    interval_off = (long) (interval_on + gen_off.nextValue());
	    wifi_on_off.add(interval_off / 1000);
	    
	    if (Constants.debug)  Log.e("TEST" , "ID: " + j + " Interval_ON: " + interval_on / 1000);   // in seconds
	    if (Constants.debug)  Log.e("TEST" , "ID: " + j + " Interval_OFF: " + interval_off / 1000);
	}
	
	
	return wifi_on_off;
}


public class Main{

     public static void main(String []args){
        System.out.println("Hello World");
        
        double LAMBDA_IN = 0.01;
        Random rand = new Random();
		rand.setSeed(300);
		ExponentialGenerator arr = new ExponentialGenerator(LAMBDA_IN, rand);
		
		
     }
}
